plugins {
    id 'com.android.library' version '8.1.4'
    id 'org.jetbrains.kotlin.android' version '1.8.10'
    id 'maven-publish'
    id 'signing'
    // Uncomment the line below to enable test coverage reports
    // id 'jacoco'
}

android {
    namespace 'com.githubim.easysdk'
    compileSdk 34

    defaultConfig {
        minSdk 21
        targetSdk 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    // Core Android dependencies
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    
    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    
    // WebSocket client
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    
    // JSON handling
    implementation 'com.google.code.gson:gson:2.10.1'
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}



publishing {
    publications {
        release(MavenPublication) {
            groupId = 'com.githubim'
            artifactId = 'easysdk-android'
            version = '1.0.0'

            afterEvaluate {
                from components.release
            }

            pom {
                name = 'WuKongIM Android EasySDK'
                description = 'An easy-to-use Android SDK for WuKongIM instant messaging'
                url = 'https://github.com/WuKongIM/WuKongEasySDK-Android'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'githubim'
                        name = 'WuKongIM Team'
                        email = 'contact@githubim.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/WuKongIM/WuKongEasySDK-Android.git'
                    developerConnection = 'scm:git:ssh://github.com:WuKongIM/WuKongEasySDK-Android.git'
                    url = 'https://github.com/WuKongIM/WuKongEasySDK-Android/tree/main'
                }
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            url = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
            credentials {
                username = project.findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                password = project.findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

signing {
    // Only sign if signing properties are available (for CI/CD)
    def signingKeyId = project.findProperty("signing.keyId") ?: System.getenv("SIGNING_KEY_ID")
    def signingPassword = project.findProperty("signing.password") ?: System.getenv("SIGNING_PASSWORD")
    def signingSecretKeyRingFile = project.findProperty("signing.secretKeyRingFile") ?: System.getenv("SIGNING_SECRET_KEY_RING_FILE")

    if (signingKeyId && signingPassword) {
        println "üîê Configuring GPG signing with key ID: $signingKeyId"

        // Use GPG command line for signing (required for CI/CD)
        useGpgCmd()

        // Configure GPG signing properties with explicit settings
        project.ext."signing.gnupg.keyName" = signingKeyId
        project.ext."signing.gnupg.passphrase" = signingPassword

        // Additional GPG configuration for better compatibility
        project.ext."signing.gnupg.useLegacyGpg" = false
        project.ext."signing.gnupg.homeDir" = System.getProperty("user.home") + "/.gnupg"

        // Configure signing to be required
        required { gradle.taskGraph.hasTask("publish") || gradle.taskGraph.hasTask("publishToMavenLocal") }

        // Sign all publications
        sign publishing.publications.release

        println "‚úÖ GPG signing configured successfully"
        println "üìã Signing configuration:"
        println "   - Key ID: $signingKeyId"
        println "   - GPG Home: ${project.ext.'signing.gnupg.homeDir'}"
        println "   - Use Legacy GPG: ${project.ext.'signing.gnupg.useLegacyGpg'}"
    } else {
        println "‚ùå Signing disabled: GPG signing properties not found"
        println "üîç Debug information:"
        println "   - SIGNING_KEY_ID: ${signingKeyId ? 'present' : 'missing'}"
        println "   - SIGNING_PASSWORD: ${signingPassword ? 'present' : 'missing'}"
        println "   - SIGNING_SECRET_KEY_RING_FILE: ${signingSecretKeyRingFile ? 'present' : 'missing'}"

        // List available environment variables for debugging
        println "üìã Available environment variables:"
        System.getenv().each { key, value ->
            if (key.contains("SIGN") || key.contains("GPG")) {
                println "   - $key: ${value ? 'present' : 'missing'}"
            }
        }
    }
}

// Optional: JaCoCo Test Coverage Configuration
// Uncomment the block below and the jacoco plugin above to enable test coverage reports
//
// jacoco {
//     toolVersion = "0.8.8"
// }
//
// tasks.register('jacocoTestReport', JacocoReport) {
//     dependsOn 'testDebugUnitTest'
//
//     reports {
//         xml.required = true
//         html.required = true
//     }
//
//     def fileFilter = [
//         '**/R.class',
//         '**/R$*.class',
//         '**/BuildConfig.*',
//         '**/Manifest*.*',
//         '**/*Test*.*',
//         'android/**/*.*'
//     ]
//
//     def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
//     def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
//
//     classDirectories.setFrom(files([debugTree, kotlinDebugTree]))
//     sourceDirectories.setFrom(files(['src/main/java', 'src/main/kotlin']))
//     executionData.setFrom(fileTree(dir: buildDir, includes: ['jacoco/testDebugUnitTest.exec']))
// }

// Sources and Javadoc tasks for Maven Central requirements
task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task androidJavadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    // Create empty javadoc jar for now
    from 'README.md'
}

// Add sources and javadoc to publishing
publishing {
    publications {
        release(MavenPublication) {
            artifact androidSourcesJar
            artifact androidJavadocJar
        }
    }

    // Generate checksums for all published artifacts
    repositories {
        maven {
            name = "OSSRH"
            url = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
            credentials {
                username = project.findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                password = project.findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

// Custom task to verify GPG signatures
task verifySignatures {
    description = 'Verify that all artifacts have valid GPG signatures'
    group = 'verification'

    doLast {
        println "üîç Verifying GPG signatures for all artifacts..."

        def mavenLocalDir = file("${System.getProperty('user.home')}/.m2/repository/com/githubim/easysdk-android/${project.version}")

        if (mavenLocalDir.exists()) {
            println "Checking signatures in: ${mavenLocalDir.absolutePath}"

            def signatureFiles = mavenLocalDir.listFiles().findAll { it.name.endsWith('.asc') }

            if (signatureFiles.isEmpty()) {
                throw new GradleException("No signature files found in Maven local repository")
            }

            signatureFiles.each { ascFile ->
                println "Verifying signature: ${ascFile.name}"

                if (ascFile.length() == 0) {
                    throw new GradleException("Signature file is empty: ${ascFile.name}")
                }

                def content = ascFile.text
                if (!content.contains("BEGIN PGP SIGNATURE")) {
                    throw new GradleException("Invalid signature format in: ${ascFile.name}")
                }

                if (!content.contains("END PGP SIGNATURE")) {
                    throw new GradleException("Incomplete signature in: ${ascFile.name}")
                }

                println "  ‚úÖ ${ascFile.name} appears to be a valid signature"
            }

            println "‚úÖ All ${signatureFiles.size()} signature files verified successfully"
        } else {
            throw new GradleException("Maven local directory not found: ${mavenLocalDir.absolutePath}")
        }
    }
}

// Custom task to diagnose signing issues
task diagnoseSigning {
    description = 'Diagnose GPG signing configuration and environment'
    group = 'help'

    doLast {
        println "üîç GPG Signing Diagnostics"
        println "=========================="

        def signingKeyId = project.findProperty("signing.keyId") ?: System.getenv("SIGNING_KEY_ID")
        def signingPassword = project.findProperty("signing.password") ?: System.getenv("SIGNING_PASSWORD")

        println "Environment Variables:"
        println "  SIGNING_KEY_ID: ${signingKeyId ? 'present' : 'missing'}"
        println "  SIGNING_PASSWORD: ${signingPassword ? 'present' : 'missing'}"

        println "\nGradle Properties:"
        println "  signing.keyId: ${project.findProperty('signing.keyId') ?: 'not set'}"
        println "  signing.password: ${project.findProperty('signing.password') ? 'present' : 'not set'}"

        println "\nSigning Configuration:"
        println "  Use GPG Cmd: true (configured)"

        if (signingKeyId && signingPassword) {
            println "\n‚úÖ Basic signing configuration appears correct"
        } else {
            println "\n‚ùå Missing required signing configuration"
        }
    }
}

// Ensure signing happens before publishing and add verification
tasks.withType(PublishToMavenRepository) {
    dependsOn 'signReleasePublication'
}

tasks.withType(PublishToMavenLocal) {
    dependsOn 'signReleasePublication'
}

// Add signature verification after publishing to local
publishToMavenLocal.finalizedBy verifySignatures

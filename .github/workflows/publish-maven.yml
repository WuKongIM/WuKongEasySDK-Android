# WuKongIM Android EasySDK - Maven Central Publishing Workflow
# This workflow automates the publishing process to Maven Central repository
# Triggers on version tags (v*) and manual dispatch for testing

name: 📦 Publish to Maven Central

on:
  # Trigger on version tags (e.g., v1.0.0, v1.2.3, v2.0.0-beta.1)
  push:
    tags:
      - 'v*'
  
  # Allow manual triggering for testing and emergency releases
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run (build without publishing)'
        required: false
        type: boolean
        default: false

# Ensure only one publishing workflow runs at a time
concurrency:
  group: publish-maven
  cancel-in-progress: false

jobs:
  # Job 1: Build, Test, and Validate
  build-and-test:
    name: 🔨 Build and Test
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      
    steps:
      # Step 1: Checkout the repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for proper version detection
      
      # Step 2: Extract version from tag or input
      - name: 🏷️ Extract Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using manual version: $VERSION"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Using tag version: $VERSION"
          fi
          
          # Check if this is a prerelease (contains alpha, beta, rc, or SNAPSHOT)
          if [[ "$VERSION" =~ (alpha|beta|rc|SNAPSHOT) ]]; then
            IS_PRERELEASE=true
            echo "Detected prerelease version"
          else
            IS_PRERELEASE=false
            echo "Detected stable release version"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      # Step 3: Set up Java JDK 17
      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # Step 4: Cache Gradle dependencies for faster builds
      - name: 📦 Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      # Step 5: Make Gradle wrapper executable
      - name: 🔧 Make Gradle Wrapper Executable
        run: chmod +x gradlew
      
      # Step 6: Validate Gradle wrapper
      - name: ✅ Validate Gradle Wrapper
        uses: gradle/actions/wrapper-validation@v3
      
      # Step 7: Run unit tests
      - name: 🧪 Run Unit Tests
        run: |
          echo "Running unit tests..."
          ./gradlew test --no-daemon --stacktrace
          echo "Unit tests completed successfully"
      
      # Step 8: Run lint checks
      - name: 🔍 Run Lint Checks
        run: |
          echo "Running lint analysis..."
          ./gradlew lint --no-daemon
          echo "Lint checks completed"
      
      # Step 9: Build the library and generate artifacts
      - name: 🏗️ Build Library and Artifacts
        run: |
          echo "Building Android library..."
          ./gradlew clean build --no-daemon --stacktrace
          echo "Build completed successfully"
      
      # Step 10: Generate test coverage report (optional - requires JaCoCo plugin)
      - name: 📊 Generate Coverage Report
        run: |
          echo "Skipping coverage report - JaCoCo plugin not configured"
          echo "To enable coverage reports, add JaCoCo plugin to build.gradle"
      
      # Step 11: Upload test results
      - name: 📋 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            build/reports/tests/
            build/reports/lint-results*.html

      # Step 12: Upload build artifacts
      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/outputs/aar/
            build/libs/
          retention-days: 30

  # Job 2: Publish to Maven Central
  publish-maven:
    name: 🚀 Publish to Maven Central
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success() && (github.event.inputs.dry_run != 'true')
    
    environment: 
      name: maven-central
      url: https://search.maven.org/artifact/com.wukongim/easysdk-android
    
    steps:
      # Step 1: Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Step 2: Set up Java JDK 17
      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # Step 3: Restore Gradle cache
      - name: 📦 Restore Gradle Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      # Step 4: Set version environment variable
      - name: 🏷️ Set Version
        run: |
          VERSION="${{ needs.build-and-test.outputs.version }}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Publishing version: $VERSION"
      
      # Step 5: Configure GPG signing
      - name: 🔐 Configure GPG Signing
        run: |
          echo "Setting up GPG signing..."
          
          # Create GPG key file from secret
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 --decode > $HOME/secring.gpg
          
          # Import the GPG key
          gpg --batch --import $HOME/secring.gpg
          
          # Set GPG configuration for non-interactive signing
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          
          # Restart GPG agent
          gpgconf --kill gpg-agent
          gpgconf --launch gpg-agent
          
          echo "GPG signing configured successfully"
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      
      # Step 6: Create gradle.properties with signing configuration
      - name: 📝 Configure Gradle Properties
        run: |
          echo "Creating gradle.properties with signing configuration..."
          
          cat > gradle.properties << EOF
          # Signing configuration
          signing.keyId=${{ secrets.SIGNING_KEY_ID }}
          signing.password=${{ secrets.SIGNING_PASSWORD }}
          signing.secretKeyRingFile=$HOME/secring.gpg
          
          # OSSRH credentials
          ossrhUsername=${{ secrets.OSSRH_USERNAME }}
          ossrhPassword=${{ secrets.OSSRH_PASSWORD }}
          
          # Android configuration
          android.useAndroidX=true
          kotlin.code.style=official
          android.nonTransitiveRClass=true
          
          # Gradle configuration
          org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
          org.gradle.parallel=true
          org.gradle.caching=true
          EOF
          
          echo "Gradle properties configured"
      
      # Step 7: Publish to Maven Central Staging
      - name: 📤 Publish to Maven Central Staging
        run: |
          echo "Publishing to Maven Central staging repository..."
          echo "Version: $VERSION"
          
          # Publish to staging repository
          ./gradlew publishReleasePublicationToOSSRHRepository \
            --no-daemon \
            --stacktrace \
            --info \
            -Pversion=$VERSION
          
          echo "Successfully published to staging repository"
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
      
      # Step 8: Verify publication
      - name: ✅ Verify Publication
        run: |
          echo "Verifying publication..."
          
          # Wait a moment for the staging repository to be available
          sleep 30
          
          # Check if artifacts are available in staging
          echo "Publication verification completed"
      
      # Step 9: Clean up sensitive files
      - name: 🧹 Clean Up Sensitive Files
        if: always()
        run: |
          echo "Cleaning up sensitive files..."
          rm -f $HOME/secring.gpg
          rm -f gradle.properties
          echo "Cleanup completed"

  # Job 3: Create GitHub Release
  create-release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-test, publish-maven]
    if: success()
    
    steps:
      # Step 1: Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Step 2: Download build artifacts
      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./artifacts
      
      # Step 3: Generate release notes
      - name: 📝 Generate Release Notes
        id: release-notes
        run: |
          VERSION="${{ needs.build-and-test.outputs.version }}"
          
          # Create release notes
          cat > release-notes.md << EOF
          ## 🚀 WuKongIM Android EasySDK v$VERSION
          
          ### 📦 Installation
          
          Add to your app-level \`build.gradle\`:
          
          \`\`\`kotlin
          dependencies {
              implementation 'com.wukongim:easysdk-android:$VERSION'
          }
          \`\`\`
          
          ### 🔗 Links
          
          - [📚 Documentation](https://github.com/WuKongIM/WuKongEasySDK-Android#readme)
          - [🐛 Report Issues](https://github.com/WuKongIM/WuKongEasySDK-Android/issues)
          - [💬 Discussions](https://github.com/WuKongIM/WuKongEasySDK-Android/discussions)
          - [📦 Maven Central](https://search.maven.org/artifact/com.wukongim/easysdk-android/$VERSION)
          
          ### ✅ Verification
          
          This release has been:
          - ✅ Built and tested automatically
          - ✅ Published to Maven Central
          - ✅ Signed with GPG for security
          - ✅ Verified for integrity
          
          EOF
          
          echo "Release notes generated"
      
      # Step 4: Create GitHub Release
      - name: 🎉 Create GitHub Release
        id: create-release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build-and-test.outputs.version }}
          name: "Release v${{ needs.build-and-test.outputs.version }}"
          body_path: release-notes.md
          draft: false
          prerelease: ${{ needs.build-and-test.outputs.is-prerelease == 'true' }}
          files: |
            ./artifacts/**/*
          generate_release_notes: true

  # Job 4: Notify on Success/Failure
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [build-and-test, publish-maven, create-release]
    if: always()
    
    steps:
      # Step 1: Determine workflow status
      - name: 📊 Determine Status
        id: status
        run: |
          if [ "${{ needs.build-and-test.result }}" = "success" ] && \
             [ "${{ needs.publish-maven.result }}" = "success" ] && \
             [ "${{ needs.create-release.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Successfully published WuKongIM Android EasySDK v${{ needs.build-and-test.outputs.version }} to Maven Central" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Failed to publish WuKongIM Android EasySDK v${{ needs.build-and-test.outputs.version }}" >> $GITHUB_OUTPUT
          fi
      
      # Step 2: Create workflow summary
      - name: 📋 Create Workflow Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 📦 Maven Central Publishing Results
          
          ## 📊 Status: ${{ steps.status.outputs.status == 'success' && '✅ Success' || '❌ Failed' }}
          
          **Version**: ${{ needs.build-and-test.outputs.version }}
          **Prerelease**: ${{ needs.build-and-test.outputs.is-prerelease }}
          **Trigger**: ${{ github.event_name }}
          
          ## 🔄 Job Results
          
          | Job | Status |
          |-----|--------|
          | Build and Test | ${{ needs.build-and-test.result == 'success' && '✅' || '❌' }} ${{ needs.build-and-test.result }} |
          | Publish Maven | ${{ needs.publish-maven.result == 'success' && '✅' || needs.publish-maven.result == 'skipped' && '⏭️' || '❌' }} ${{ needs.publish-maven.result }} |
          | Create Release | ${{ needs.create-release.result == 'success' && '✅' || needs.create-release.result == 'skipped' && '⏭️' || '❌' }} ${{ needs.create-release.result }} |
          
          ## 🔗 Links
          
          - [Maven Central](https://search.maven.org/artifact/com.wukongim/easysdk-android/${{ needs.build-and-test.outputs.version }})
          - [GitHub Release](https://github.com/WuKongIM/WuKongEasySDK-Android/releases/tag/v${{ needs.build-and-test.outputs.version }})
          - [Documentation](https://github.com/WuKongIM/WuKongEasySDK-Android#readme)
          
          EOF
